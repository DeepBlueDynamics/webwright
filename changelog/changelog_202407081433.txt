# Changelog

## 2024-07-08 14:33:22
### Changes
diff --git a/lib/functions/git_commit_and_push.py b/lib/functions/git_commit_and_push.py
index 3fc7988..b09fc1b 100644
--- a/lib/functions/git_commit_and_push.py
+++ b/lib/functions/git_commit_and_push.py
@@ -1,12 +1,13 @@
-# lib/functions/git_commit_and_push.py
 import os
 from git import Repo
+from datetime import datetime
 from lib.function_wrapper import function_info_decorator
 
 @function_info_decorator
 def git_commit_and_push(commit_message: str = "Automated commit") -> dict:
     """
-    Automatically stages all changes, commits them with the provided message, and pushes the changes to the remote repository.
+    Automatically stages all changes, commits them with the provided message, generates a changelog,
+    saves it in the changelog directory with a timestamp filename, and pushes the changes to the remote repository.
 
     :param commit_message: The commit message to use for the commit. Defaults to "Automated commit".
     :type commit_message: str
@@ -20,6 +21,27 @@ def git_commit_and_push(commit_message: str = "Automated commit") -> dict:
         # Initialize the repository
         repo = Repo(repo_path)
 
+        # Get the current date and time for the log filename
+        now = datetime.now()
+        timestamp = now.strftime("%Y%m%d%H%M")
+        changelog_filename = f"changelog_{timestamp}.txt"
+        changelog_dir = os.path.join(repo_path, 'changelog')
+        changelog_path = os.path.join(changelog_dir, changelog_filename)
+
+        # Ensure the changelog directory exists
+        os.makedirs(changelog_dir, exist_ok=True)
+
+        # Get the git diff output
+        diff_output = repo.git.diff('HEAD')
+
+        # Write the changelog if there are changes
+        if diff_output:
+            with open(changelog_path, 'w') as changelog_file:
+                changelog_file.write("# Changelog\n\n")
+                changelog_file.write(f"## {now.strftime('%Y-%m-%d %H:%M:%S')}\n")
+                changelog_file.write("### Changes\n")
+                changelog_file.write(diff_output)
+
         # Check the repository's current status
         if repo.is_dirty(untracked_files=True):
             # Add all changes to the staging area